import RomanCalculator from './calculator'

describe('Roman Calculator', () => {
  it('should validate if the number is valid', () => {
    expect(RomanCalculator.isValidRoman('ASD')).toBe(false)
    expect(RomanCalculator.isValidRoman('XVILS')).toBe(false)
    expect(RomanCalculator.isValidRoman('ABCDEFGHIJKLMNOPRSTUVWXYZ')).toBe(false)
    expect(RomanCalculator.isValidRoman('some random word')).toBe(false)
    expect(RomanCalculator.isValidRoman()).toBe(false)

    expect(RomanCalculator.isValidRoman('IVX')).toBe(false)
    expect(RomanCalculator.isValidRoman('XVI')).toBe(true)
    expect(RomanCalculator.isValidRoman('v')).toBe(true)
    expect(RomanCalculator.isValidRoman('vv')).toBe(false)
    expect(RomanCalculator.isValidRoman('viv')).toBe(false)
    expect(RomanCalculator.isValidRoman('l')).toBe(true)
    expect(RomanCalculator.isValidRoman('ll')).toBe(false)
    expect(RomanCalculator.isValidRoman('lil')).toBe(false)
    expect(RomanCalculator.isValidRoman('III')).toBe(true)
    expect(RomanCalculator.isValidRoman('iviii')).toBe(false)
    expect(RomanCalculator.isValidRoman('d')).toBe(true)
    expect(RomanCalculator.isValidRoman('dd')).toBe(false)
    expect(RomanCalculator.isValidRoman('dld')).toBe(false)
    expect(RomanCalculator.isValidRoman('XXXX')).toBe(false)
    expect(RomanCalculator.isValidRoman('IVXLCDM')).toBe(false)
    expect(RomanCalculator.isValidRoman('mdclxvi')).toBe(true)
    expect(RomanCalculator.isValidRoman('MMMDCCCLXXIV')).toBe(true)
    expect(RomanCalculator.isValidRoman('xxiv')).toBe(true)
  })

  it('should convert values to arabic correctly', () => {
    expect(RomanCalculator.convertToArabic('III')).toBe(3)
    expect(RomanCalculator.convertToArabic('v')).toBe(5)
    expect(RomanCalculator.convertToArabic('XVI')).toBe(16)
    expect(RomanCalculator.convertToArabic('xxiv')).toBe(24)
    expect(RomanCalculator.convertToArabic('l')).toBe(50)
    expect(RomanCalculator.convertToArabic('cclix')).toBe(259)
    expect(RomanCalculator.convertToArabic('d')).toBe(500)
    expect(RomanCalculator.convertToArabic('mdclxvi')).toBe(1666)
    expect(RomanCalculator.convertToArabic('MMMDCCCLXXIV')).toBe(3874)
  })

  it('should convert values to roman correctly', () => {
    expect(RomanCalculator.convertToRoman(3)).toBe('III')
    expect(RomanCalculator.convertToRoman(5)).toBe('V')
    expect(RomanCalculator.convertToRoman(16)).toBe('XVI')
    expect(RomanCalculator.convertToRoman(24)).toBe('XXIV')
    expect(RomanCalculator.convertToRoman(50)).toBe('L')
    expect(RomanCalculator.convertToRoman(259)).toBe('CCLIX')
    expect(RomanCalculator.convertToRoman(500)).toBe('D')
    expect(RomanCalculator.convertToRoman(1000)).toBe('M')
    expect(RomanCalculator.convertToRoman(1666)).toBe('MDCLXVI')
    expect(RomanCalculator.convertToRoman(3874)).toBe('MMMDCCCLXXIV')
  })

  it('should add values correctly', () => {
    expect(() => RomanCalculator.add('xvi', 'sad')).toThrow()
    expect(() => RomanCalculator.add(undefined, 'x')).toThrow()
    expect(() => RomanCalculator.add('xvi', undefined)).toThrow()
    expect(() => RomanCalculator.add('xvi')).toThrow()
    expect(() => RomanCalculator.add('MMM', 'MM')).toThrow()

    expect(RomanCalculator.add('xvi', 'iv')).toBe('XX')
    expect(RomanCalculator.add('iv', 'xvi')).toBe('XX')
    expect(RomanCalculator.add('MDCLXVI', 'MDCLXVI')).toBe('MMMCCCXXXII')
    expect(RomanCalculator.add('I', 'iii')).toBe('IV')
    expect(RomanCalculator.add('xx', 'cc')).toBe('CCXX')
    expect(RomanCalculator.add('v', 'ii')).toBe('VII')
    expect(RomanCalculator.add('c', 'd')).toBe('DC')
    expect(RomanCalculator.add('MMMIX', 'MCMXC')).toBe('MMMMCMXCIX')
  })

  it('helper method should extract values correactly', () => {
    expect(() => RomanCalculator.extract(undefined, 'XX')).toThrow()
    expect(() => RomanCalculator.extract('XVI', undefined)).toThrow()
    expect(() => RomanCalculator.extract('XVI', 0)).toThrow()
    expect(() => RomanCalculator.extract('XVI', null)).toThrow()
    expect(() => RomanCalculator.extract('XVI', 'random')).toThrow()
    expect(() => RomanCalculator.extract('XVI', 25)).toThrow()

    expect(RomanCalculator.extract('XVI', 'XX')).toEqual([ 16, 20 ])
    expect(RomanCalculator.extract('CD', 'I')).toEqual([ 400, 1 ])
    expect(RomanCalculator.extract('MMMM', 'MMCM')).toEqual([ 4000, 2900 ])
    expect(RomanCalculator.extract('IV', 'XXX')).toEqual([ 4, 30 ])
  })

  it('should substract values correctly', () => {
    expect(() => RomanCalculator.substract('xvi', 'sad')).toThrow()
    expect(() => RomanCalculator.substract(undefined, 'x')).toThrow()
    expect(() => RomanCalculator.substract('xvi', undefined)).toThrow()
    expect(() => RomanCalculator.substract('xvi')).toThrow()

    expect(() => RomanCalculator.substract('MM', 'MM')).toThrow()
    expect(() => RomanCalculator.substract('MM', 'MMMM')).toThrow()
    expect(() => RomanCalculator.substract('I', 'X')).toThrow()
    expect(() => RomanCalculator.substract('M', 'MI')).toThrow()

    expect(RomanCalculator.substract('xvi', 'iv')).toBe('XII')
    expect(RomanCalculator.substract('MM', 'xvi')).toBe('MCMLXXXIV')
    expect(RomanCalculator.substract('CC', 'XX')).toBe('CLXXX')
    expect(RomanCalculator.substract('v', 'ii')).toBe('III')
    expect(RomanCalculator.substract('d', 'c')).toBe('CD')
    expect(RomanCalculator.substract('X', 'I')).toBe('IX')
  })
})
